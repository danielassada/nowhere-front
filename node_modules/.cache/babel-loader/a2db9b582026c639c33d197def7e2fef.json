{"ast":null,"code":"import _classCallCheck from \"/media/daniel/Local Disk/nowhere/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/media/daniel/Local Disk/nowhere/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/media/daniel/Local Disk/nowhere/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/media/daniel/Local Disk/nowhere/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/media/daniel/Local Disk/nowhere/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/media/daniel/Local Disk/nowhere/client/src/components/search/SearchForm.js\";\nimport React from \"react\";\nimport { Transition } from \"semantic-ui-react\";\nimport { reduxForm, Field } from \"redux-form\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"actions\";\n\nvar SearchForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SearchForm, _React$Component);\n\n  function SearchForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SearchForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SearchForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      visible: false,\n      className: \"hidden\",\n      checked: false\n    };\n\n    _this.toggle = function () {\n      return _this.setState({\n        checked: !_this.state.checked\n      });\n    };\n\n    _this.handleVisibility = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        visible: !_this.state.visible\n      });\n    };\n\n    _this.onSubmit = function (formProps) {\n      _this.props.addMusic(formProps, function () {\n        if (_this.props.genericResponse && _this.state.visible === true) {\n          console.log(_this.props.genericResponse);\n\n          _this.setState({\n            visible: false\n          });\n        } else if (_this.props.genericResponse === \"Couldn't be sended\") {\n          _this.setState({\n            className: \"visible\"\n          });\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SearchForm, [{\n    key: \"buttonText\",\n    value: function buttonText() {\n      if (this.state.visible) {\n        return \"Hide form\";\n      }\n\n      return \"Add Term\";\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"ui error message \".concat(this.state.className),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"close icon\",\n        onClick: function onClick() {\n          return _this2.setState({\n            className: \"hidden\"\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, this.state.errorMessage), React.createElement(\"ul\", {\n        className: \"list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"You must writte a Term.\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"You must to use valid caracters.\")));\n    }\n    /* what situation I should show error\n    when genericResponse is different of \"\" and Sucess\n    when form was submitted\n    when close was not been clicked */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var animation = \"fly up\";\n      var visible = this.state.visible;\n      var duration = 1100;\n      var handleSubmit = this.props.handleSubmit;\n      return React.createElement(\"div\", {\n        id: \"seachForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"toggleForm\",\n        className: \"ui primary button puller\",\n        onClick: this.handleVisibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.buttonText()), React.createElement(Transition.Group, {\n        animation: animation,\n        duration: duration,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, visible && React.createElement(\"form\", {\n        onSubmit: handleSubmit(this.onSubmit),\n        className: \"ui form searchForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, this.renderError(), React.createElement(\"fieldset\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Term\"), React.createElement(Field, {\n        id: \"term\",\n        name: \"term\",\n        type: \"text\",\n        component: \"input\",\n        className: \"ui input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"description\"), React.createElement(Field, {\n        name: \"description\",\n        type: \"description\",\n        component: \"input\",\n        autoComplete: \"none\",\n        className: \"ui input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"ui primary button centered\",\n        onClick: function onClick() {\n          if (_this3.props.genericResponse === \"Couldn't be sended\") {\n            _this3.setState({\n              className: \"visible\"\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return SearchForm;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  if (state.search.genericResponse) {\n    return {\n      genericResponse: state.search.genericResponse\n    };\n  }\n\n  return {\n    submit: null\n  };\n};\n\nexport default compose(connect(mapStateToProps, actions), reduxForm({\n  form: \"addSearchForm\"\n}))(SearchForm);","map":{"version":3,"sources":["/media/daniel/Local Disk/nowhere/client/src/components/search/SearchForm.js"],"names":["React","Transition","reduxForm","Field","compose","connect","actions","SearchForm","state","visible","className","checked","toggle","setState","handleVisibility","e","preventDefault","onSubmit","formProps","props","addMusic","genericResponse","console","log","errorMessage","animation","duration","handleSubmit","buttonText","renderError","Component","mapStateToProps","ownProps","search","submit","form"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Transition } from \"semantic-ui-react\";\nimport { reduxForm, Field } from \"redux-form\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"actions\";\n\nclass SearchForm extends React.Component {\n  state = { visible: false, className: \"hidden\", checked: false };\n\n  toggle = () => this.setState({ checked: !this.state.checked });\n  handleVisibility = e => {\n    e.preventDefault();\n    this.setState({ visible: !this.state.visible });\n  };\n  onSubmit = formProps => {\n    this.props.addMusic(formProps, () => {\n      if (this.props.genericResponse && this.state.visible === true) {\n        console.log(this.props.genericResponse);\n\n        this.setState({ visible: false });\n      } else if (this.props.genericResponse === \"Couldn't be sended\") {\n        this.setState({ className: \"visible\" });\n      }\n    });\n  };\n  buttonText() {\n    if (this.state.visible) {\n      return \"Hide form\";\n    }\n    return \"Add Term\";\n  }\n  renderError() {\n    return (\n      <div className={`ui error message ${this.state.className}`}>\n        <i\n          className=\"close icon\"\n          onClick={() => this.setState({ className: \"hidden\" })}\n        />\n        <div className=\"header\">{this.state.errorMessage}</div>\n        <ul className=\"list\">\n          <li>You must writte a Term.</li>\n          <br />\n          <li>You must to use valid caracters.</li>\n        </ul>\n      </div>\n    );\n  }\n  /* what situation I should show error\n  when genericResponse is different of \"\" and Sucess\n  when form was submitted\n  when close was not been clicked */\n\n  render() {\n    const animation = \"fly up\";\n    const visible = this.state.visible;\n    const duration = 1100;\n    const { handleSubmit } = this.props;\n\n    return (\n      <div id=\"seachForm\">\n        <button\n          id=\"toggleForm\"\n          className=\"ui primary button puller\"\n          onClick={this.handleVisibility}\n        >\n          {this.buttonText()}\n        </button>\n        <Transition.Group animation={animation} duration={duration}>\n          {visible && (\n            <form\n              onSubmit={handleSubmit(this.onSubmit)}\n              className=\"ui form searchForm\"\n            >\n              {this.renderError()}\n              <fieldset className=\"field\">\n                <label>Term</label>\n                <Field\n                  id=\"term\"\n                  name=\"term\"\n                  type=\"text\"\n                  component=\"input\"\n                  className=\"ui input\"\n                />\n              </fieldset>\n              <fieldset className=\"field\">\n                <label>description</label>\n                <Field\n                  name=\"description\"\n                  type=\"description\"\n                  component=\"input\"\n                  autoComplete=\"none\"\n                  className=\"ui input\"\n                />\n              </fieldset>\n              \n              <button\n                className=\"ui primary button centered\"\n                onClick={() => {\n                  if (this.props.genericResponse === \"Couldn't be sended\") {\n                    this.setState({ className: \"visible\" });\n                  }\n                }}\n              >\n                Submit\n              </button>\n            </form>\n          )}\n        </Transition.Group>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  if (state.search.genericResponse) {\n    return { genericResponse: state.search.genericResponse };\n  }\n  return { submit: null };\n};\nexport default compose(\n  connect(\n    mapStateToProps,\n    actions\n  ),\n  reduxForm({ form: \"addSearchForm\" })\n)(SearchForm);\n"]},"metadata":{},"sourceType":"module"}