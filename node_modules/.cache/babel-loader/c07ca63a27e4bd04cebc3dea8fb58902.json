{"ast":null,"code":"import { UnknownCodeError } from '../errors';\n/**\n * A service is basically a bridge/handler function for various endpoints.\n * It can be passed into the client and used magically.\n */\n\nvar Service =\n/** @class */\nfunction () {\n  function Service(client) {\n    this.client = client;\n  }\n  /**\n   * Takes a response. If the status code isn't 200, attempt to find an\n   * error handler for it or throw unknown error. If it's all good,\n   * we return the response synchronously.\n   */\n\n\n  Service.prototype.handleResponse = function (res, handlers) {\n    // 200 codes are already great!\n    if (res.statusCode === 200) {\n      return res;\n    } // Otherwise, we have to handle it.\n\n\n    var handler = handlers && handlers[res.statusCode];\n\n    if (!handler) {\n      handler = UnknownCodeError;\n    }\n\n    throw new handler(res);\n  };\n  /**\n   * Simple wrapper that makes and handles a response in one go.\n   */\n\n\n  Service.prototype.makeHandled = function (method, path, data, handlers) {\n    var _this = this;\n\n    return this.client.request(method, path, data).then(function (res) {\n      return _this.handleResponse(res, handlers);\n    });\n  };\n\n  return Service;\n}();\n\nexport { Service };","map":null,"metadata":{},"sourceType":"module"}