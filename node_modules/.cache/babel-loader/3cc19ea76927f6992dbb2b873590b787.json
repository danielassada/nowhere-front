{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Service } from '../services/Service';\n/**\n * Service for interacting with the game endpoints on the Mixer REST API.\n */\n\nvar GameService =\n/** @class */\nfunction (_super) {\n  __extends(GameService, _super);\n\n  function GameService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Joins the game for a specified channel ID.\n   */\n\n\n  GameService.prototype.join = function (channelId) {\n    return this.makeHandled('get', \"interactive/\" + channelId + \"/robot\");\n  };\n  /**\n   * Gets a game from a specified game ID.\n   */\n\n\n  GameService.prototype.getGame = function (gameId) {\n    return this.makeHandled('get', \"interactive/games/\" + gameId);\n  };\n  /**\n   * Updates a game from a specified game ID.\n   */\n\n\n  GameService.prototype.updateGame = function (gameId, data) {\n    return this.makeHandled('put', \"interactive/games/\" + gameId, {\n      body: data\n    });\n  };\n  /**\n   * Deletes a game from a specified game ID.\n   */\n\n\n  GameService.prototype.deleteGame = function (gameId) {\n    return this.makeHandled('delete', \"interactive/games/\" + gameId);\n  };\n  /**\n   * Gets various information about a channel that is running an interactive game.\n   */\n\n\n  GameService.prototype.getChannelGame = function (channelId) {\n    return this.makeHandled('get', \"interactive/\" + channelId);\n  };\n  /**\n   * Gets all the games owned by a specific user ID.\n   */\n\n\n  GameService.prototype.ownedGames = function (userId) {\n    return this.makeHandled('get', \"interactive/games/owned?user=\" + userId);\n  };\n  /**\n   * Gets a specific game and all its versions by a specific game ID and user ID.\n   */\n\n\n  GameService.prototype.ownedGameVersions = function (userId, gameId) {\n    return this.makeHandled('get', \"interactive/games/owned?user=\" + userId + \"&where=id.eq.\" + gameId);\n  };\n  /**\n   * Gets all the games that are published.\n   */\n\n\n  GameService.prototype.published = function () {\n    return this.makeHandled('get', 'interactive/games');\n  };\n  /**\n   * Creates a new interactive game.\n   */\n\n\n  GameService.prototype.create = function (data) {\n    return this.makeHandled('post', 'interactive/games', {\n      body: data\n    });\n  };\n  /**\n   * Creates a new version of a game for a specific game ID and user ID.\n   */\n\n\n  GameService.prototype.createVersion = function (data) {\n    return this.makeHandled('post', 'interactive/versions', {\n      body: data\n    });\n  };\n  /**\n   * Updates a version of a game by specific version ID.\n   */\n\n\n  GameService.prototype.updateVersion = function (versionId, data) {\n    return this.makeHandled('put', \"interactive/versions/\" + versionId, {\n      body: data\n    });\n  };\n\n  return GameService;\n}(Service);\n\nexport { GameService };","map":null,"metadata":{},"sourceType":"module"}