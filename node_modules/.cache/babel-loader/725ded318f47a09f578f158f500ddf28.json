{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Service } from './Service';\n/**\n * Service for interacting with the chat endpoints on the Mixer REST API.\n */\n\nvar ChatService =\n/** @class */\nfunction (_super) {\n  __extends(ChatService, _super);\n\n  function ChatService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Joins the chat for a specified channel ID.\n   */\n\n\n  ChatService.prototype.join = function (channelId) {\n    return this.makeHandled('get', \"chats/\" + channelId);\n  };\n  /**\n   * Retrieve a list of online users in a chat specified by channelId.\n   */\n\n\n  ChatService.prototype.getUsers = function (channelId, data) {\n    return this.makeHandled('get', \"chats/\" + channelId + \"/users\", {\n      qs: data\n    });\n  };\n  /**\n   * Search for users within a chat specified by channelId.\n   */\n\n\n  ChatService.prototype.searchUsers = function (channelId, data) {\n    return this.makeHandled('get', \"chats/\" + channelId + \"/users/search\", {\n      qs: data\n    });\n  };\n\n  return ChatService;\n}(Service);\n\nexport { ChatService };","map":null,"metadata":{},"sourceType":"module"}