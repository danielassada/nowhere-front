{"ast":null,"code":"import _classCallCheck from \"f:\\\\nowhere\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"f:\\\\nowhere\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"f:\\\\nowhere\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"f:\\\\nowhere\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"f:\\\\nowhere\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"f:\\\\nowhere\\\\client\\\\src\\\\components\\\\songs\\\\SongForm.js\";\nimport React from \"react\";\nimport { Transition, Checkbox } from \"semantic-ui-react\";\nimport { reduxForm, Field } from \"redux-form\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"actions\";\n\nvar SongForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SongForm, _React$Component);\n\n  function SongForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SongForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SongForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      visible: false,\n      className: \"hidden\",\n      checked: false\n    };\n\n    _this.toggle = function () {\n      return _this.setState({\n        checked: !_this.state.checked\n      });\n    };\n\n    _this.handleVisibility = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        visible: !_this.state.visible\n      });\n    };\n\n    _this.onSubmit = function (formProps) {\n      _this.props.addMusic(formProps, function () {});\n    };\n\n    return _this;\n  }\n\n  _createClass(SongForm, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log(this);\n    }\n  }, {\n    key: \"buttonText\",\n    value: function buttonText() {\n      if (this.state.visible) {\n        return \"Hide form\";\n      }\n\n      return \"Add link\";\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"ui error message \".concat(this.state.className),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"close icon\",\n        onClick: function onClick() {\n          return _this2.setState({\n            className: \"hidden\"\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, this.state.errorMessage), React.createElement(\"ul\", {\n        className: \"list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"You must writte a title and address.\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"You must to use valid caracters.\")));\n    }\n    /* what situation I should show error\r\n    when genericResponse is different of \"\" and Sucess\r\n    when form was submitted\r\n    when close was not been clicked */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var animation = \"fly up\";\n      var visible = this.state.visible;\n      var duration = 1100;\n      var handleSubmit = this.props.handleSubmit;\n      return React.createElement(\"div\", {\n        id: \"linksForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"ui primary button puller\",\n        onClick: this.handleVisibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, this.buttonText()), React.createElement(Transition.Group, {\n        animation: animation,\n        duration: duration,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, visible && React.createElement(\"form\", {\n        onSubmit: handleSubmit(this.onSubmit),\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, this.renderError(), React.createElement(\"fieldset\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Music\"), React.createElement(Field, {\n        name: \"music\",\n        type: \"text\",\n        component: \"input\",\n        autoComplete: \"none\",\n        className: \"ui input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        radio: true,\n        label: \"relax\",\n        onChange: this.toggle,\n        checked: this.state.checked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        radio: true,\n        label: \"exciting\",\n        onChange: this.toggle,\n        checked: this.state.checked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        radio: true,\n        label: \"positive\",\n        onChange: this.toggle,\n        checked: this.state.checked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        radio: true,\n        label: \"negative\",\n        onChange: this.toggle,\n        checked: this.state.checked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        radio: true,\n        label: \"olf but gold\",\n        onChange: this.toggle,\n        checked: this.state.checked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"ui primary button centered\",\n        onClick: function onClick() {\n          if (_this3.props.genericResponse === \"Couldn't be sended\") {\n            _this3.setState({\n              className: \"visible\"\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return SongForm;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  if (state.auth.genericResponse) {\n    return {\n      genericResponse: state.auth.genericResponse\n    };\n  }\n\n  return {\n    submit: null\n  };\n};\n\nexport default compose(connect(mapStateToProps, actions), reduxForm({\n  form: \"addSongForm\"\n}))(SongForm);","map":{"version":3,"sources":["f:\\nowhere\\client\\src\\components\\songs\\SongForm.js"],"names":["React","Transition","Checkbox","reduxForm","Field","compose","connect","actions","SongForm","state","visible","className","checked","toggle","setState","handleVisibility","e","preventDefault","onSubmit","formProps","props","addMusic","console","log","errorMessage","animation","duration","handleSubmit","buttonText","renderError","genericResponse","Component","mapStateToProps","ownProps","auth","submit","form"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Transition, Checkbox } from \"semantic-ui-react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"actions\";\r\n\r\nclass SongForm extends React.Component {\r\n  state = { visible: false, className: \"hidden\", checked: false };\r\n  componentDidUpdate() {\r\n    console.log(this);\r\n  }\r\n  toggle = () => this.setState({ checked: !this.state.checked });\r\n  handleVisibility = e => {\r\n    e.preventDefault();\r\n    this.setState({ visible: !this.state.visible });\r\n  };\r\n  onSubmit = formProps => {\r\n    this.props.addMusic(formProps, () => {});\r\n  };\r\n  buttonText() {\r\n    if (this.state.visible) {\r\n      return \"Hide form\";\r\n    }\r\n    return \"Add link\";\r\n  }\r\n  renderError() {\r\n    return (\r\n      <div className={`ui error message ${this.state.className}`}>\r\n        <i\r\n          className=\"close icon\"\r\n          onClick={() => this.setState({ className: \"hidden\" })}\r\n        />\r\n        <div className=\"header\">{this.state.errorMessage}</div>\r\n        <ul className=\"list\">\r\n          <li>You must writte a title and address.</li>\r\n          <br />\r\n          <li>You must to use valid caracters.</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n  /* what situation I should show error\r\n  when genericResponse is different of \"\" and Sucess\r\n  when form was submitted\r\n  when close was not been clicked */\r\n\r\n  render() {\r\n    const animation = \"fly up\";\r\n    const visible = this.state.visible;\r\n    const duration = 1100;\r\n    const { handleSubmit } = this.props;\r\n\r\n    return (\r\n      <div id=\"linksForm\">\r\n        <button\r\n          className=\"ui primary button puller\"\r\n          onClick={this.handleVisibility}\r\n        >\r\n          {this.buttonText()}\r\n        </button>\r\n        <Transition.Group animation={animation} duration={duration}>\r\n          {visible && (\r\n            <form onSubmit={handleSubmit(this.onSubmit)} className=\"ui form\">\r\n              {this.renderError()}\r\n              <fieldset className=\"field\">\r\n                <label>Music</label>\r\n                <Field\r\n                  name=\"music\"\r\n                  type=\"text\"\r\n                  component=\"input\"\r\n                  autoComplete=\"none\"\r\n                  className=\"ui input\"\r\n                />\r\n              </fieldset>\r\n\r\n              <fieldset className=\"field\">\r\n                <Checkbox\r\n                  radio\r\n                  label=\"relax\"\r\n                  onChange={this.toggle}\r\n                  checked={this.state.checked}\r\n                />\r\n              </fieldset>\r\n              <fieldset className=\"field\">\r\n                <Checkbox\r\n                  radio\r\n                  label=\"exciting\"\r\n                  onChange={this.toggle}\r\n                  checked={this.state.checked}\r\n                />\r\n              </fieldset>\r\n              <fieldset className=\"field\">\r\n                <Checkbox\r\n                  radio\r\n                  label=\"positive\"\r\n                  onChange={this.toggle}\r\n                  checked={this.state.checked}\r\n                />\r\n              </fieldset>\r\n              <fieldset className=\"field\">\r\n                <Checkbox\r\n                  radio\r\n                  label=\"negative\"\r\n                  onChange={this.toggle}\r\n                  checked={this.state.checked}\r\n                />\r\n              </fieldset>\r\n              <fieldset className=\"field\">\r\n                <Checkbox\r\n                  radio\r\n                  label=\"olf but gold\"\r\n                  onChange={this.toggle}\r\n                  checked={this.state.checked}\r\n                />\r\n              </fieldset>\r\n              <button\r\n                className=\"ui primary button centered\"\r\n                onClick={() => {\r\n                  if (this.props.genericResponse === \"Couldn't be sended\") {\r\n                    this.setState({ className: \"visible\" });\r\n                  }\r\n                }}\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          )}\r\n        </Transition.Group>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  if (state.auth.genericResponse) {\r\n    return { genericResponse: state.auth.genericResponse };\r\n  }\r\n  return { submit: null };\r\n};\r\nexport default compose(\r\n  connect(\r\n    mapStateToProps,\r\n    actions\r\n  ),\r\n  reduxForm({ form: \"addSongForm\" })\r\n)(SongForm);\r\n"]},"metadata":{},"sourceType":"module"}