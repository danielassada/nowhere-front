{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Service } from './Service';\n/**\n * Service for interacting with the channel endpoints on the Mixer REST API.\n */\n\nvar ChannelService =\n/** @class */\nfunction (_super) {\n  __extends(ChannelService, _super);\n\n  function ChannelService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Retrieves a list of all channels.\n   */\n\n\n  ChannelService.prototype.all = function (data) {\n    return this.makeHandled('get', 'channels', {\n      qs: data\n    });\n  };\n  /**\n   * Retrieves channel data for channel specified by channel.\n   */\n\n\n  ChannelService.prototype.getChannel = function (channel) {\n    return this.makeHandled('get', \"channels/\" + channel);\n  };\n  /**\n   * Retrieves preferences for a channel specified by channelId\n   */\n\n\n  ChannelService.prototype.getPreferences = function (channelId) {\n    return this.makeHandled('get', \"channels/\" + channelId + \"/preferences\");\n  };\n  /**\n   * Retrieves broadcast for a channel specified by channelId\n   */\n\n\n  ChannelService.prototype.getBroadcast = function (channelId) {\n    return this.makeHandled('get', \"channels/\" + channelId + \"/broadcast\");\n  };\n\n  return ChannelService;\n}(Service);\n\nexport { ChannelService };","map":null,"metadata":{},"sourceType":"module"}