{"ast":null,"code":"var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n}; // tslint:disable-next-line import-name no-require-imports\n\n\nimport { all } from 'deepmerge';\nimport * as querystring from 'querystring';\nimport { OAuthProvider } from './providers/OAuth';\nimport { DefaultRequestRunner } from './RequestRunner';\nimport { Socket } from './ws/Socket';\nimport { ChannelService } from './services/Channel';\nimport { ChatService } from './services/Chat';\nimport { ClipsService } from './services/Clips';\nimport { GameService } from './services/Game'; // DO NOT EDIT, THIS IS UPDATE BY THE BUILD SCRIPT\n\nvar packageVersion = '0.13.0'; // package version\n\n/**\n * Main client.\n */\n\nvar Client =\n/** @class */\nfunction () {\n  /**\n   * The primary Mixer client, responsible for storing authentication state\n   * and dispatching requests to the API.\n   */\n  function Client(requestRunner) {\n    this.requestRunner = requestRunner;\n    this.urls = {\n      api: 'https://mixer.com/api/v1',\n      public: 'https://mixer.com'\n    };\n    this.channel = new ChannelService(this);\n    this.chat = new ChatService(this);\n    this.clips = new ClipsService(this);\n    this.game = new GameService(this);\n    this.userAgent = this.buildUserAgent();\n\n    if (!requestRunner) {\n      this.requestRunner = new DefaultRequestRunner();\n    }\n  }\n\n  Client.prototype.buildUserAgent = function () {\n    var client = \"MixerClient/\" + packageVersion; // tslint:disable-next-line no-typeof-undefined\n\n    if (typeof navigator !== 'undefined') {\n      // in-browser\n      return navigator.userAgent + ' ' + client;\n    }\n\n    return client + ' (JavaScript; Node.js ' + process.version + ')';\n  };\n  /**\n   * Sets the the API/public URLs for the client.\n   */\n\n\n  Client.prototype.setUrl = function (kind, url) {\n    this.urls[kind] = url;\n    return this;\n  };\n  /**\n   * Builds a path to the Mixer API by concating it with the address.\n   */\n\n\n  Client.prototype.buildAddress = function (base, path, querystr) {\n    var url = base; // Strip any trailing slash from the base\n\n    if (url.slice(-1) === '/') {\n      url = url.slice(0, -1);\n    }\n\n    var sanitizedPath = path; // And any leading slash from the path.\n\n    if (sanitizedPath.charAt(0) === '/') {\n      sanitizedPath = sanitizedPath.slice(1);\n    }\n\n    url = url + '/' + sanitizedPath; // And just add the query string\n\n    if (querystr) {\n      url += '?' + querystring.stringify(querystr);\n    }\n\n    return url;\n  };\n  /**\n   * Creates and returns an authentication provider instance.\n   */\n\n\n  Client.prototype.use = function (provider) {\n    this.provider = provider;\n    return provider;\n  };\n  /**\n   * Returns the associated provider instance, as set by the\n   * `use` method.\n   */\n\n\n  Client.prototype.getProvider = function () {\n    return this.provider;\n  };\n  /**\n   * Attempts to run a given request.\n   */\n\n\n  Client.prototype.request = function (method, path, data) {\n    var _this = this;\n\n    if (data === void 0) {\n      data = {};\n    }\n\n    var req = all([this.provider ? this.provider.getRequest() : {}, {\n      method: method || '',\n      url: this.buildAddress(this.urls.api, path || ''),\n      headers: {\n        'User-Agent': this.userAgent\n      },\n      json: true\n    }, data]);\n    return this.requestRunner.run(req).catch(function (err) {\n      if (_this.provider) {\n        return _this.provider.handleResponseError(err, req);\n      }\n\n      throw err;\n    });\n  };\n\n  Client.prototype.createChatSocket = function (ws, endpoints, options) {\n    return new Socket(ws, endpoints, __assign({\n      clientId: this.provider instanceof OAuthProvider ? this.provider.getClientId() : null\n    }, options));\n  };\n\n  return Client;\n}();\n\nexport { Client };","map":null,"metadata":{},"sourceType":"module"}